---
import { pwaInfo } from "virtual:pwa-info"
import type { Props } from "@astrojs/starlight/props"
import StarlightHead from "@astrojs/starlight/components/Head.astro"
---

{pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} />}

<script>
  let pressedKeys: Array<string> = []
  document.addEventListener('keyup', event => {
    event.preventDefault()

    if (pressedKeys.length === 2 && pressedKeys[0] === 'ctrl' && pressedKeys[1] === 'd') {
      console.warn('Ctrl + D detected, clearing localStorage and sessionStorage')
      pressedKeys = []
      localStorage.clear()
      sessionStorage.clear()
    }

    if (event.key.toLowerCase() === 'control') pressedKeys = ['ctrl']
    else if (pressedKeys.length === 1 && event.key.toLowerCase() === 'd') pressedKeys.push('d')
    else pressedKeys = []
  })
</script>

<script>
  // From a page:
  import { registerSW } from 'virtual:pwa-register'
  // check for updates every 10 minutes the page will refresh automatically
  const intervalMS = 10 * 60 * 1000
  //    10 minutes in seconds =  minutes 10 * seconds  60
  const updateSW = registerSW({
    immediate: true,
    onRegisteredSW(swScriptUrl, registration) {
      console.info('SW registered: ', swScriptUrl)
      registration &&
        setInterval(async () => {
          if (registration.installing || !navigator) return

          if ('connection' in navigator && !navigator.onLine) return

          const resp = await fetch(swScriptUrl, {
            cache: 'no-store',
            headers: {
              cache: 'no-store',
              'cache-control': 'no-cache',
            },
          })

          if (resp?.status === 200) await registration.update()
        }, intervalMS)
    },
    onOfflineReady() {
      console.info('PWA application ready to work offline')
    },
  })
</script>
<script is:inline type="module">
  /**
   * TODO: pagefind highlight (not important)
   */
</script>

<StarlightHead {...Astro.props}><slot /></StarlightHead>
